# -*- coding: utf-8 -*-
"""server_hathak.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BgP2ZX7bGjBiONLgOsqEIh6576Sk7x1J
"""

# -*- coding: utf-8 -*-
# Telegram Auto-Poster Bot for Forum Topics (Haraj Al-An'am)
# Runtime: python-telegram-bot==21.4
# Entrypoint: python main.py

import os, sqlite3, time, hashlib, asyncio, logging
from typing import Dict, Any, List
from datetime import datetime, timedelta, timezone

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# ============ Logging ============
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("haraj-bot")

# ============ Env / Config ============
BOT_TOKEN = os.environ.get("BOT_TOKEN")  # ضعه في Secrets على Railway
FORUM_CHAT_ID = int(os.environ.get("FORUM_CHAT_ID", "-1002509382400"))
FORUM_USERNAME = os.environ.get("FORUM_USERNAME", "hat_hak_hirag")
OWNER_ID = int(os.environ.get("OWNER_ID", "0"))
RATE_LIMIT_HOURS = int(os.environ.get("RATE_LIMIT_HOURS", "6"))

THREAD_IDS: Dict[str, int] = {
    "الإبل": 2,
    "الأغنام": 3,
    "الخيول": 4,
    "الطيور": 5,
    "مستلزمات الحلال": 6,
    "نصائح وإرشاد بيطري": 7,
    "الشحن والخدمات اللوجستية": 8,
    "عقود البيع والوساطة": 9,
    "إعلانات وإشعارات الإدارة": 10,
}

SECTION, AGE, COUNT, PRICE, LOCATION, PHOTOS, CONTACT = range(7)

DB_PATH = os.environ.get("DB_PATH", "ads.db")

# ============ DB ============
def db_init():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        last_post_ts INTEGER DEFAULT 0
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS posted_ads (
        ad_hash TEXT,
        user_id INTEGER,
        created_ts INTEGER,
        PRIMARY KEY (ad_hash, user_id)
    )""")
    conn.commit()
    conn.close()

def get_last_post_ts(user_id: int) -> int:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT last_post_ts FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else 0

def set_last_post_ts(user_id: int, ts: int):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        "INSERT INTO users(user_id,last_post_ts) VALUES(?,?) "
        "ON CONFLICT(user_id) DO UPDATE SET last_post_ts=excluded.last_post_ts",
        (user_id, ts),
    )
    conn.commit()
    conn.close()

def ad_recently_posted(user_id: int, ad_hash: str, window_hours: int = RATE_LIMIT_HOURS) -> bool:
    cutoff = int(time.time()) - window_hours * 3600
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        "SELECT 1 FROM posted_ads WHERE user_id=? AND ad_hash=? AND created_ts>=?",
        (user_id, ad_hash, cutoff),
    )
    row = c.fetchone()
    conn.close()
    return bool(row)

def store_posted_ad(user_id: int, ad_hash: str):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        "INSERT OR REPLACE INTO posted_ads(ad_hash,user_id,created_ts) VALUES(?,?,?)",
        (ad_hash, user_id, int(time.time()))
    )
    conn.commit()
    conn.close()

# ============ Helpers ============
def fmt(val: str) -> str:
    return val if val else "— (غير محدد)"

def make_ad_hash(section: str, age: str, count: str, price: str, location: str) -> str:
    base = f"{section}|{(age or '').strip()}|{(count or '').strip()}|{(price or '').strip()}|{(location or '').strip()}"
    return hashlib.sha256(base.encode("utf-8")).hexdigest()[:24]

def seconds_to_hhmm(ss: int) -> str:
    hh = ss // 3600
    mm = (ss % 3600) // 60
    return f"{hh} ساعة و {mm} دقيقة"

def build_ad_text(bot_username: str, data: Dict[str, Any]) -> str:
    section = data.get("section") or "—"
    header = f"📢 للإعلان والنشر تواصل مع البوت: @{bot_username}\n"
    promo  = f"🟢 الآن: إعلان جديد في قسم {section}\n"

    body = (
        f"🐪 القسم: {fmt(data.get('section'))}\n"
        f"📆 العمر: {fmt(data.get('age'))}\n"
        f"🔢 العدد: {fmt(data.get('count'))}\n"
        f"💰 السعر: {fmt(data.get('price'))}\n"
        f"📍 الموقع: {fmt(data.get('location'))}\n"
    )

    missing = []
    for k in ("age", "count", "price", "location"):
        if not data.get(k):
            missing.append(k)

    warn = "\n⚠️ بعض البيانات ناقصة – للتفاصيل تواصل مع البائع" if missing else ""
    return header + "\n" + promo + "\n" + body + warn

def get_bot_username(context: ContextTypes.DEFAULT_TYPE) -> str:
    uname = context.bot_data.get("bot_username")
    if uname:
        return uname
    return "YOUR_BOT_USERNAME"

def build_contact_button(update: Update, contact_un: str | None):
    """
    يبني زر تواصل مع البائع. لو مفيش username محدد، يحاول يستخدم Username صاحب الإعلان.
    لو مفيش برضه، يرجّع None بدون أزرار.
    """
    username = None
    if contact_un:
        username = contact_un.lstrip("@")
    elif update.effective_user and update.effective_user.username:
        username = update.effective_user.username

    if not username:
        return None

    url = f"https://t.me/{username}"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("تواصل مع البائع", url=url)]])
    return kb

# ============ Commands ============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = await context.bot.get_me()
    context.bot_data["bot_username"] = me.username
    kb = ReplyKeyboardMarkup([["بدء إعلان جديد"]], resize_keyboard=True)
    text = (
        "حياك الله 👋\n"
        "عشان تنزل إعلانك: اضغط «بدء إعلان جديد» أو اكتب /announce\n\n"
        f"• الإعلان الواحد لكل بائع كل {RATE_LIMIT_HOURS} ساعات\n"
        "• النشر تلقائي في القسم المناسب\n"
        "• لو نسيت بيانات، هننزل الإعلان ومعاه تنبيه بسيط"
    )
    await update.effective_message.reply_text(text, reply_markup=kb)

async def topicid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    tid = getattr(msg, "message_thread_id", None)
    chat_id = update.effective_chat.id
    await msg.reply_text(f"chat_id: {chat_id}\nmessage_thread_id: {tid}")

async def kill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if OWNER_ID and update.effective_user and update.effective_user.id != OWNER_ID:
        return await update.message.reply_text("غير مصرح.")
    context.application.bot_data["__STOP_FLAG__"] = True
    await update.message.reply_text("جارٍ إيقاف البوت…")
    await context.application.stop()
    await context.application.shutdown()

# ============ Conversation ============
async def announce_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    last_ts = get_last_post_ts(user_id)
    now = int(time.time())
    wait_s = last_ts + RATE_LIMIT_HOURS*3600 - now
    if wait_s > 0:
        await update.effective_message.reply_text(
            f"عذرًا لا يمكنك نشر اعلانات الا كل {RATE_LIMIT_HOURS} ساعات ، تقدر تنزل إعلان جديد بعد: {seconds_to_hhmm(wait_s)}"
        )
        return ConversationHandler.END

    context.user_data.clear()
    context.user_data["photos"] = []

    sections = list(THREAD_IDS.keys())
    rows = [sections[i:i+3] for i in range(0, len(sections), 3)]
    kb = ReplyKeyboardMarkup(rows + [["إلغاء"]], resize_keyboard=True, one_time_keyboard=True)
    await update.effective_message.reply_text("اختر القسم المناسب لإعلانك:", reply_markup=kb)
    return SECTION

async def set_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    section = update.effective_message.text.strip()
    if section not in THREAD_IDS:
        await update.effective_message.reply_text("اختيار غير صالح. اختر من الأزرار.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    context.user_data["section"] = section
    await update.effective_message.reply_text("اكتب العمر (مثال: 3 سنوات). اكتب /skip لو مش عايز تحدد.")
    return AGE

async def set_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.effective_message.text.strip()
    await update.effective_message.reply_text("اكتب العدد (مثال: 15). اكتب /skip لو مش عايز تحدد.")
    return COUNT

async def skip_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = ""
    await update.effective_message.reply_text("اكتب العدد (مثال: 15). اكتب /skip لو مش عايز تحدد.")
    return COUNT

async def set_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["count"] = update.effective_message.text.strip()
    await update.effective_message.reply_text("اكتب السعر (مثال: 950 ريال). اكتب /skip لو مش عايز تحدد.")
    return PRICE

async def skip_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["count"] = ""
    await update.effective_message.reply_text("اكتب السعر (مثال: 950 ريال). اكتب /skip لو مش عايز تحدد.")
    return PRICE

async def set_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price"] = update.effective_message.text.strip()
    await update.effective_message.reply_text("اكتب الموقع (مثال: الرياض). اكتب /skip لو مش عايز تحدد.")
    return LOCATION

async def skip_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price"] = ""
    await update.effective_message.reply_text("اكتب الموقع (مثال: الرياض). اكتب /skip لو مش عايز تحدد.")
    return LOCATION

async def set_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["location"] = update.effective_message.text.strip()
    await update.effective_message.reply_text(
        "أرسل صور الإعلان (صورة أو أكثر، بحد أقصى 10). لما تخلص اكتب /done. أو اكتب /skip لتخطي الصور."
    )
    return PHOTOS

async def skip_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["location"] = ""
    await update.effective_message.reply_text(
        "أرسل صور الإعلان (صورة أو أكثر، بحد أقصى 10). لما تخلص اكتب /done. أو اكتب /skip لتخطي الصور."
    )
    return PHOTOS

async def add_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "photos" not in context.user_data:
        context.user_data["photos"] = []
    phs: List[str] = context.user_data["photos"]

    if len(phs) >= 10:
        await update.effective_message.reply_text("وصلت للحد الأقصى (10 صور). اكتب /done للمتابعة.")
        return PHOTOS

    photo = update.message.photo[-1]
    phs.append(photo.file_id)
    await update.effective_message.reply_text(f"تم استلام صورة ({len(phs)}/10). أرسل المزيد أو اكتب /done.")
    return PHOTOS

async def skip_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["photos"] = []
    default_un = update.effective_user.username
    hint = f"يوزرك الحالي: @{default_un}" if default_un else "ما عندك يوزرنيم."
    await update.effective_message.reply_text(f"اكتب وسيلة التواصل (Username فقط). {hint} اكتب /skip لو تعتمد يوزرك الحالي أو رابط مباشر.")
    return CONTACT

async def done_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    default_un = update.effective_user.username
    hint = f"يوزرك الحالي: @{default_un}" if default_un else "ما عندك يوزرنيم."
    await update.effective_message.reply_text(f"اكتب وسيلة التواصل (Username فقط). {hint} اكتب /skip لو تعتمد يوزرك الحالي أو رابط مباشر.")
    return CONTACT

async def set_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.effective_message.text.strip().lstrip("@")
    return await finalize_post(update, context)

async def skip_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = ""
    return await finalize_post(update, context)

async def finalize_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = context.user_data

    ad_hash = make_ad_hash(
        data.get("section",""),
        data.get("age",""),
        data.get("count",""),
        data.get("price",""),
        data.get("location",""),
    )
    if ad_recently_posted(user.id, ad_hash, RATE_LIMIT_HOURS):
        await update.effective_message.reply_text("يبدو إنك نزلت إعلان مشابه مؤخرًا. حاول لاحقًا.")
        return ConversationHandler.END

    section = data.get("section")
    thread_id = THREAD_IDS.get(section)
    if not thread_id:
        await update.effective_message.reply_text("حدث خطأ في اختيار القسم. أعد المحاولة.")
        return ConversationHandler.END

    bot_username = get_bot_username(context)
    ad_text = build_ad_text(bot_username, data)
    contact_kb = build_contact_button(update, data.get("contact"))

    photos = data.get("photos", [])
    sent_msg = None

    try:
        if photos and len(photos) >= 2:
            media = [InputMediaPhoto(pid) for pid in photos[:10]]
            await context.bot.send_media_group(
                chat_id=FORUM_CHAT_ID,
                message_thread_id=thread_id,
                media=media,
            )
            sent_msg = await context.bot.send_message(
                chat_id=FORUM_CHAT_ID,
                message_thread_id=thread_id,
                text=ad_text,
                reply_markup=contact_kb,
            )
        elif photos and len(photos) == 1:
            sent_msg = await context.bot.send_photo(
                chat_id=FORUM_CHAT_ID,
                message_thread_id=thread_id,
                photo=photos[0],
                caption=ad_text,
                reply_markup=contact_kb,
            )
        else:
            sent_msg = await context.bot.send_message(
                chat_id=FORUM_CHAT_ID,
                message_thread_id=thread_id,
                text=ad_text,
                reply_markup=contact_kb,
            )
    except Exception as e:
        await update.effective_message.reply_text(f"تعذّر النشر: {e}")
        return ConversationHandler.END

    set_last_post_ts(user.id, int(time.time()))
    store_posted_ad(user.id, ad_hash)

    link_note = ""
    # ملاحظة: يلزم الجروب يكون عام وباسم مستخدم FORUM_USERNAME صحيح
    if FORUM_USERNAME and sent_msg and sent_msg.message_id:
        link_note = f"\n\nرابط إعلانك: https://t.me/{FORUM_USERNAME}/{sent_msg.message_id}"

    await update.effective_message.reply_text("تم نشر إعلانك بنجاح ✅" + link_note, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("تم الإلغاء.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ============ App wiring ============
def build_app():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("topicid", topicid))
    app.add_handler(CommandHandler("kill", kill))

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("announce", announce_entry),
            MessageHandler(filters.Regex("^بدء إعلان جديد$"), announce_entry)
        ],
        states={
            SECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_section)],
            AGE: [
                CommandHandler("skip", skip_age),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_age)
            ],
            COUNT: [
                CommandHandler("skip", skip_count),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_count)
            ],
            PRICE: [
                CommandHandler("skip", skip_price),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_price)
            ],
            LOCATION: [
                CommandHandler("skip", skip_location),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_location)
            ],
            PHOTOS: [
                CommandHandler("skip", skip_photos),
                CommandHandler("done", done_photos),
                MessageHandler(filters.PHOTO, add_photo)
            ],
            CONTACT: [
                CommandHandler("skip", skip_contact),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_contact)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)
    return app

async def runner_forever():
    db_init()
    backoff = 5
    while True:
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN غير مضبوط في متغيرات البيئة.")
            await asyncio.sleep(60)
            continue

        app = build_app()
        app.bot_data["__STOP_FLAG__"] = False

        try:
            logger.info("🚀 Starting polling…")
            await app.run_polling(close_loop=False)
            if app.bot_data.get("__STOP_FLAG__"):
                logger.info("🛑 Stopped by /kill.")
                break
            logger.warning("run_polling انتهت بدون /kill. إعادة التشغيل بعد %s ثوانٍ…", backoff)
        except Exception as e:
            logger.exception("❌ Exception in polling: %s", e)
        await asyncio.sleep(backoff)

if __name__ == "__main__":
    asyncio.run(runner_forever())
